/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package PSOFaultSecure;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Vector;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
//import javax.swing.JTextField;
import java.text.*;
/**
 *
 * @author SAPVI
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    //PSOProcess p;
    ReadFile rf;
    
    ProblemSetDFG psdfg;
    GlobalConstants gc;
    static private MainWindow _instance;
    public MainWindow() {
        initComponents();
        outpane1.setCaretPosition(0);
           rf=new ReadFile();
         // p=new PSOProcess();
        
          psdfg=new ProblemSetDFG();
         gc = GlobalConstants.getInstance();
        inputverifier verifyinput = new inputverifier();
        power.setInputVerifier(verifyinput);
        texe.setInputVerifier(verifyinput);
        area.setInputVerifier(verifyinput);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }
    static public MainWindow getInstance() {
        if (_instance == null) {
            _instance = new MainWindow();
        }
        return _instance;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        DFG = new javax.swing.JButton();
        Detail = new javax.swing.JButton();
        DFGText = new javax.swing.JTextField();
        DetailText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        powerNtexe = new javax.swing.JRadioButton();
        areaNtexe = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        texe = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        power = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        area = new javax.swing.JTextField();
        OK = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        w1 = new javax.swing.JTextField();
        w2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        setofdata = new javax.swing.JTextField();
        outputpane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outpane1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        output2 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        swarmsize = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        no_iteration = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        c1 = new javax.swing.JTextField();
        c2 = new javax.swing.JTextField();
        Exastive = new javax.swing.JButton();
        kc = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PSO Based DSE");
        setBackground(new java.awt.Color(204, 204, 255));

        DFG.setText("DFG/CDFG");
        DFG.setBorderPainted(false);
        DFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFGActionPerformed(evt);
            }
        });

        Detail.setText("Module Info");
        Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailActionPerformed(evt);
            }
        });

        DFGText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFGTextActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 255));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Design Space Exploration Based on Particle Swarm Optimization");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("mW");

        jLabel6.setText("Âµs");

        jLabel7.setText("au");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Result");

        buttonGroup1.add(powerNtexe);
        powerNtexe.setSelected(true);
        powerNtexe.setText("Power and Texe Trade off");
        powerNtexe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerNtexeActionPerformed(evt);
            }
        });

        buttonGroup1.add(areaNtexe);
        areaNtexe.setText("Area and Texe Trade off");
        areaNtexe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaNtexeActionPerformed(evt);
            }
        });

        jLabel2.setText("Time of Exe Constraints");

        texe.setText("1");
        texe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texeActionPerformed(evt);
            }
        });

        jLabel1.setText("Power Contraints");

        power.setText("1");
        power.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerActionPerformed(evt);
            }
        });

        jLabel4.setText("Area Constraints");

        area.setText("0");
        area.setEnabled(false);
        area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaActionPerformed(evt);
            }
        });

        OK.setText("Exploration Process");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jLabel9.setText("W1");

        jLabel10.setText("W2");

        w1.setText("0.5");
        w1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                w1ActionPerformed(evt);
            }
        });

        w2.setText("0.5");

        jLabel11.setText("#set of data");

        setofdata.setText("1000");
        setofdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setofdataActionPerformed(evt);
            }
        });

        outpane1.setColumns(20);
        outpane1.setRows(5);
        jScrollPane1.setViewportView(outpane1);

        outputpane.addTab("Result", jScrollPane1);

        output2.setColumns(20);
        output2.setRows(5);
        jScrollPane2.setViewportView(output2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );

        outputpane.addTab("Exastive", jPanel1);

        jLabel12.setText("Swarm Size");

        swarmsize.setText("3");
        swarmsize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swarmsizeActionPerformed(evt);
            }
        });

        jLabel13.setText("#Iteration");

        no_iteration.setText("100");

        jLabel14.setText("C1");

        jLabel15.setText("C2");

        c1.setText("2");

        c2.setText("2");
        c2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c2ActionPerformed(evt);
            }
        });

        Exastive.setText("Exastive Search");
        Exastive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExastiveActionPerformed(evt);
            }
        });

        kc.setText("1");

        jLabel16.setText("Kc");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(24, 24, 24)
                        .addComponent(texe, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(kc, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(powerNtexe)
                                    .addComponent(areaNtexe)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                        .addComponent(power, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabel7))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel9))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(w1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(w2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(OK)
                                        .addGap(41, 41, 41)
                                        .addComponent(reset))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(DetailText, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                            .addComponent(DFGText))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(DFG, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Detail))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(swarmsize)
                            .addComponent(no_iteration, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel14))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(c1)
                            .addComponent(setofdata, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outputpane, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Exastive, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(DFG)
                                    .addComponent(DFGText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(DetailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Detail))
                                .addGap(18, 18, 18)
                                .addComponent(powerNtexe)
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(w1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(areaNtexe)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(w2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(setofdata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(swarmsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(no_iteration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(texe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(kc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Exastive, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(outputpane, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFGActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser;
        String fileName;

        chooser = new JFileChooser();
 //  chooser.setCurrentDirectory(new java.io.File("."));

        int r = chooser.showOpenDialog(new JFrame());
        if (r == JFileChooser.APPROVE_OPTION) {
        fileName =chooser.getSelectedFile().getPath();
        DFGText.setText(fileName);
    }//GEN-LAST:event_DFGActionPerformed
    }
    private void DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailActionPerformed
        // TODO add your handling code here:
         String DFGTxt=DFGText.getText();
         //Read_file rf=new Read_file();
         
       //rf.read_C_DGF(DFGTxt);
         rf.readDFG(DFGTxt);
        //p.read_detail();
        JFileChooser chooser;
        String fileName;

        chooser = new JFileChooser();
        
 //  chooser.setCurrentDirectory(new java.io.File("."));

        int r = chooser.showOpenDialog(new JFrame());
        if (r == JFileChooser.APPROVE_OPTION) {
        fileName =chooser.getSelectedFile().getPath();
        DetailText.setText(fileName);
       
            gc.setofdata=Integer.parseInt(setofdata.getText()); 
       
               
         rf.read_detail(fileName);
        
    }
    }//GEN-LAST:event_DetailActionPerformed

    private void DFGTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFGTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DFGTextActionPerformed

    private void powerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_powerActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        // TODO add your handling code here
        //String DFGTxt=DFGText.getText();
        //String DetailTxt=DetailText.getText();
       // Read_file rf=new Read_file();
        //rf.read_DFG(DFGTxt);
        //rf.read_detail(DetailTxt);
        gc.cost.clear();
        gc.power.clear();
        gc.exetime.clear();
        gc.gbestcost.clear();
        gc.gbestexetime.clear();
        gc.gbestpower.clear();
        gc.gblocation.clear();
        gc.controlstep.clear();
        gc.gbestarea.clear();
        gc.output="";
        gc.predictcount=0;
        System.out.println("power con="+power.getText()+"  Time of exe cons= "+texe.getText());
        gc.PowerConstraint=Double.parseDouble(power.getText());
        gc.AreaConstraint=Double.parseDouble(area.getText());
        gc.TexeConstraint=Double.parseDouble(texe.getText());
        gc.w1=Double.parseDouble(w1.getText());
        gc.w2=Double.parseDouble(w2.getText());
        gc.c1=Double.parseDouble(c1.getText());
        gc.c2=Double.parseDouble(c2.getText());
        gc.kc=Integer.parseInt(kc.getText());
        gc.no_iteration=Integer.parseInt(no_iteration.getText());
        gc.swarm_size=Integer.parseInt(swarmsize.getText());
        System.out.println("KC=  "+gc.kc);
        //System.out.println("setof data"+gc.setofdata+"  Area constraints= "+gc.AreaConstraint);
        int total=1;
       
        //initialization of cost in n dimension
       {
            for(int j=0;j<(gc.size);j++)
            total=total*gc.max[j];
        }
        for(int i=0;i<total;i++){
            gc.cost.add(0.0);
            gc.power.add(0.0);
            gc.area.add(0.0);
            gc.exetime.add(0.0);
            gc.controlstep.add(0);
        }
        
        // Dominance_DSE dd=new Dominance_DSE();
        
        long startTime = System.currentTimeMillis();
        if(powerNtexe.isSelected()){
            gc.power_texe=true;
            gc.area_texe=false;
            
            
        }
         if(areaNtexe.isSelected()){
            gc.power_texe=false;
            gc.area_texe=true;
           
        }
         
             PSOProcessDFG ppdfg=new PSOProcessDFG();
                ppdfg.execute();
        
        long stopTime = System.currentTimeMillis();
        long contime=gc.conTime-startTime;
      long elapsedTime = stopTime - startTime;
      //result.display(elapsedTime+" miliseconds");
      System.out.println("Convergence time- "+contime+"\nexploration time- "+elapsedTime);
       double power=0.0;
       double area=0.0;
       double exeTime=0.0;
      
          if(gc.power_texe){
            power=psdfg.calculatePower(gc.result_comp);
            exeTime=psdfg.calculateTex(gc.result_comp); 
            gc.output=gc.output+"\npower= "+power+"mw\nExecution Time= "+exeTime+"us\n";
          }
          if(gc.area_texe){
               area=psdfg.calculateArea(gc.result_comp);
              exeTime=psdfg.calculateTex(gc.result_comp);
              gc.output=gc.output+"\nArea= "+area+" #transistor\nExecution Time= "+exeTime+"us\n";
          }
             
             // ps.schdule(gc.operation,gc.result_comp);
       //gc.output=gc.output+"\npower= "+power+"mw\nExecution Time= "+exeTime+"us\n";
       gc.output=gc.output+"\nConvergence time- "+contime+"ms\nexploration time- "+elapsedTime+"ms\n\n";
       //outpane1.setText(gc.output);
       for(int i=0;i<gc.gbestcost.size();i++){
            gc.output=gc.output+" iteration  "+(i+1) +"   "+ gc.gbestcost.elementAt(i)+"\n";
       }
       writeText(gc.output);
       if(gc.power_texe){
       System.out.println("Power\tExecutionTime");
        for(int i=0;i<gc.gbestcost.size();i++){
            System.out.println(gc.gbestpower.elementAt(i)+"\t"+gc.gbestexetime.elementAt(i));
           
       }
       System.out.println("Fitness"); 
       for(int i=0;i<gc.gbestcost.size();i++){
            System.out.println( gc.gbestcost.elementAt(i));
       }
       }
       if(gc.area_texe){
       System.out.println("Area");
        for(int i=0;i<gc.gbestcost.size();i++){
            System.out.println(gc.gbestarea.elementAt(i));
           
       }
       System.out.println("Execution Time"); 
       for(int i=0;i<gc.gbestcost.size();i++){
            
           System.out.println(gc.gbestexetime.elementAt(i));
           
       }
       System.out.println("Fitness"); 
       for(int i=0;i<gc.gbestcost.size();i++){
            System.out.println( gc.gbestcost.elementAt(i));
       }
       }
       
       
         if(gc.power_texe){
       {
           for(int i=0;i<gc.gblocation.size();i++){
       for(int j=0; j<gc.size-1;j++){
                         //output=output+  "     Best R"+j+": " + gBestLocation.getLoc()[j]; 
			System.out.print(" " + gc.gblocation.get(i).getLoc()[j]);
			///System.out.println("     Best Y: " + gBestLocation.getLoc()[1]);
                        
                       }
       System.out.println("");
       }
       int temp=1;
       int loc[]=new int[gc.size];
      System.out.println("ALL");
        for(int i=0;i<gc.cost.size();i++){
         if(gc.cost.elementAt(i)!=0.0){
             int no=i;
             for(int k=0;k<gc.size;k++){
        temp=1;
        for(int j=k+1;j<gc.size;j++){
            
                      temp *= (gc.max[j]);
          }
        loc[k]=no/temp;
        //System.out.println("no  "+no);
        no = no%temp;
        //System.out.println("no  "+no);
    }
           for(int k=0;k<gc.size;k++){
               System.out.print((loc[k]+1)+"  ");
           } 
            System.out.print("   "+gc.power.elementAt(i)+"   "+ gc.exetime.elementAt(i)+"   "+gc.cost.elementAt(i)+"\n");
             }
         
       }
       }
         }
         
         if(gc.area_texe){
       {
           for(int i=0;i<gc.gblocation.size();i++){
       for(int j=0; j<gc.size-1;j++){
                         //output=output+  "     Best R"+j+": " + gBestLocation.getLoc()[j]; 
			System.out.print(" " + gc.gblocation.get(i).getLoc()[j]);
			///System.out.println("     Best Y: " + gBestLocation.getLoc()[1]);
                       }
       System.out.println("");
       }
       int temp=1;
       int loc[]=new int[gc.size];
      System.out.println("ALL");
        for(int i=0;i<gc.cost.size();i++){
         if(gc.cost.elementAt(i)!=0.0){
             int no=i;
             for(int k=0;k<gc.size;k++){
        temp=1;
        for(int j=k+1;j<gc.size;j++){
            
                      temp *= (gc.max[j]);
          }
        loc[k]=no/temp;
        //System.out.println("no  "+no);
        no = no%temp;
        //System.out.println("no  "+no);
    }
           for(int k=0;k<gc.size;k++){
               System.out.print((loc[k]+1)+"  ");
           } 
            System.out.print("   "+gc.area.elementAt(i)+"   "+ gc.exetime.elementAt(i)+"   "+gc.cost.elementAt(i)+"\n");
             }
         
       }
       }
         }
        /*System.out.println("ALLExecution Time"); 
       for(int i=0;i<gc.exetime.size();i++){
            
           System.out.println(gc.exetime.elementAt(i));
           
       }
       System.out.println("ALLFitness"); 
       for(int i=0;i<gc.cost.size();i++){
            System.out.println( gc.cost.elementAt(i));
       }*/
       
      //scheduleArea.setText(gc.schedule);
     // result r=new result();
       /* Enumeration e=gc.max_component_detail.elements();
  //System.out.println("The elements of vector: " + vector);
  while(e.hasMoreElements()){
  System.out.println("The elements are: " + e.nextElement());
  }*/
     int cnt=0;
      for(int i=0;i<gc.cost.size();i++){
          if(gc.cost.elementAt(i)!=0)
              cnt++;
            
      }
      System.out.println( "Total evaluated architecture  "+cnt);
    }//GEN-LAST:event_OKActionPerformed

    private void powerNtexeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerNtexeActionPerformed
        // TODO add your handling code here:
        area.setEnabled(false);
        power.setEnabled(true);
    }//GEN-LAST:event_powerNtexeActionPerformed

    private void areaNtexeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaNtexeActionPerformed
        // TODO add your handling code here:
        area.setEnabled(true);
        power.setEnabled(false);
    }//GEN-LAST:event_areaNtexeActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        power.setText("0");
        area.setText("0");
        texe.setText("0");
        DFGText.setText("");
        DetailText.setText("");
        powerNtexe.setEnabled(true);
        areaNtexe.setEnabled(false);
        area.setEnabled(false);
    }//GEN-LAST:event_resetActionPerformed

    private void areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaActionPerformed

    private void w1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_w1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_w1ActionPerformed

    private void texeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texeActionPerformed

    private void swarmsizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swarmsizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_swarmsizeActionPerformed

    private void c2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c2ActionPerformed

    private void setofdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setofdataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setofdataActionPerformed

    private void ExastiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExastiveActionPerformed
        // TODO add your handling code here:
        long startTime = System.currentTimeMillis();
         if(powerNtexe.isSelected()){
            gc.power_texe=true;
            gc.area_texe=false;
            
            
        }
         if(areaNtexe.isSelected()){
            gc.power_texe=false;
            gc.area_texe=true;
           
        }
        gc.output2="";
        gc.PowerConstraint=Double.parseDouble(power.getText());
        gc.AreaConstraint=Double.parseDouble(area.getText());
        gc.TexeConstraint=Double.parseDouble(texe.getText());
        ExastiveSearch es= new ExastiveSearch();
        es.createList();
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
      //result.display(elapsedTime+" miliseconds");
      System.out.println("exploration time- "+elapsedTime);
      gc.output2 +="\n\nexploration time- "+elapsedTime;
        output2.setText(gc.output2);
        
    }//GEN-LAST:event_ExastiveActionPerformed
    
    /**
     * @param args the command line arguments
     */
   // public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
        /* Create and display the form */
       // java.awt.EventQueue.invokeLater(new Runnable() {
       //     public void run() {
       //         new MainWindow().setVisible(true);
       //     }
      //  });
        
   // }
     public void writeText(String str) {
        outpane1.setText(str);
         //.append(str);
        outpane1.setCaretPosition(outpane1.getDocument().getLength());
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DFG;
    private javax.swing.JTextField DFGText;
    private javax.swing.JButton Detail;
    private javax.swing.JTextField DetailText;
    private javax.swing.JButton Exastive;
    private javax.swing.JButton OK;
    private javax.swing.JTextField area;
    private javax.swing.JRadioButton areaNtexe;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField c1;
    private javax.swing.JTextField c2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kc;
    private javax.swing.JTextField no_iteration;
    private javax.swing.JTextArea outpane1;
    private javax.swing.JTextArea output2;
    private javax.swing.JTabbedPane outputpane;
    private javax.swing.JTextField power;
    private javax.swing.JRadioButton powerNtexe;
    private javax.swing.JButton reset;
    private javax.swing.JTextField setofdata;
    private javax.swing.JTextField swarmsize;
    private javax.swing.JTextField texe;
    private javax.swing.JTextField w1;
    private javax.swing.JTextField w2;
    // End of variables declaration//GEN-END:variables


class inputverifier extends InputVerifier {

        String str;
        
        public boolean verify(JComponent input) {
            //gc.setofdata=Integer.parseInt(setofdata.getText());
            String DetailTxt=DetailText.getText();
             gc.kc=Integer.parseInt(kc.getText());
        //Read_file rf=new Read_file();
       // p.read_DFG(DetailTxt);
      // p.read_detail(DetailTxt);
          //int x=1;
            Vector<Object> min_component_detail=new <Object>Vector();
            Vector<Object> max_component_detail=new <Object>Vector();
            max_component_detail=gc.max_component_detail;
            int size=max_component_detail.size();
        Object component[]=max_component_detail.toArray();
        for(int i=0;i<size;i=i+2){
            min_component_detail.add(component[i]);
            min_component_detail.add(1);
        }
       // Dfactor_power dp=new Dfactor_power();
       // Dfactor_time_exe dte=new Dfactor_time_exe();
       // Dfactor_Area da=new Dfactor_Area();
        
        DecimalFormat df = new DecimalFormat("#.##");
            if (input == power) {
                String text = power.getText();
                 double maxpower=0.0;
                 double minpower=0.0;
       
            maxpower=psdfg.calculatePower(max_component_detail);
            minpower=psdfg.calculatePower(min_component_detail);
        
                String str1="power value must be between  "+df.format(minpower)+"mW  and "+df.format(maxpower)+"mW";
                double value = Double.parseDouble(text);
                if(value<minpower || value>maxpower){
                JOptionPane.showMessageDialog(null, str1, "Message " +
                        "Message", 1);
                return false;
                }
            } else if (input == texe) {
                String text = texe.getText();
                double maxTexe=0.0;
                double minTexe=0.0;
              
                    maxTexe=psdfg.calculateTex(min_component_detail);
                    minTexe=psdfg.calculateTex(max_component_detail);
               
                String str2="Time of execution value must be between  "+minTexe+"Âµs  and "+maxTexe+" Âµs";
               double value = Double.parseDouble(text);
                if(value<minTexe || value>maxTexe){
                JOptionPane.showMessageDialog(null, str2, "Message " +
                        "Message", 1);
                return false;
                }
            }
            else if (input == area) {
                String areav = area.getText();
                double maxarea=0.0;
                double minarea=0.0;
               {
                    maxarea=psdfg.calculateArea(max_component_detail);
                    minarea=psdfg.calculateArea(min_component_detail);
                }
                String str2="Area value must be between  "+minarea+"  and "+maxarea;
               double value = Double.parseDouble(areav);
                if(value<minarea || value>maxarea){
                JOptionPane.showMessageDialog(null, str2, "Message " +
                        "Message", 1);
                return false;
                }
            }

            return true;
        }
    }

}
